language: cpp

addons:
    apt:
        sources:
            - ubuntu-toolchain-r-test
          # - llvm-toolchain-trusty-5.0
          # - sourceline: 'deb http://apt.llvm.org/trusty/ llvm-toolchain-trusty-5.0 main'
          #   key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
        packages:
            - gcc-8
            - g++-8
            - gcc-7
            - g++-7
            - cmake
    # coverity_scan:
    #     project:
    #         name: "FOSL/utility"
    #         description: "Build submitted via Travis CI"
    #     notification_email: martin.michalec.fosl@gmail.com
    #     build_command_prepend: "cmake $(python ./../script/cmake_release_flags.py) -D ENABLE_COVERAGE:BOOL=TRUE . "
    #     build_command:   "cmake --build . -- -j2"
    #     branch_pattern: coverity_scan

matrix:
    include:
        - os: linux
          dist: xenial
          sudo: false
          env: GCC_VER="7"
          compiler: gcc
        # - os: linux
        #   sudo: false
        #   env: GCC_VER="6" CMAKE_OPTIONS="-D DYNLOAD_ENABLED:BOOL=FALSE -D MULTITHREAD_SUPPORT_ENABLED:BOOL=FALSE -D USE_STD_MAKE_SHARED:BOOL=TRUE" BUILD_ONLY=1
        #   compiler: gcc
        # - os: linux
        #   sudo: false
        #   env: GCC_VER="7" # CPPCHECK=1 CMAKE_OPTIONS="-D RUN_FUZZY_TESTS:BOOL=TRUE"
        #   compiler: gcc
        - os: linux
          dist: xenial
          sudo: false
          env: GCC_VER="8" COVERAGE=1 # CPPCHECK=1 CMAKE_OPTIONS="-D RUN_FUZZY_TESTS:BOOL=TRUE"
          compiler: gcc
        - os: osx
          compiler: clang
          osx_image: xcode10
          env: CLANG_VER="5.0"
        # - os: osx
        #   compiler: clang
        #   osx_image: xcode10
        #   env: CLANG_VER="5.0"
        # - os: osx
        #   compiler: clang
        #   osx_image: xcode10
        #   env: CLANG_VER="5.0" CMAKE_OPTIONS="-D DYNLOAD_ENABLED:BOOL=FALSE -D MULTITHREAD_SUPPORT_ENABLED:BOOL=FALSE -D USE_STD_MAKE_SHARED:BOOL=TRUE" BUILD_ONLY=1

before_install:
    - cd example

    - if [ "${GCC_VER}" != "" ]; then
        export CXX="g++-${GCC_VER}";
        export CC="gcc-${GCC_VER}";
        export GCOV="gcov-${GCC_VER}";
      fi
    - if [ "${CLANG_VER}" != "" ]; then
          export CXX="clang++-${CLANG_VER}";
      fi

    - if [[ "${TRAVIS_OS_NAME}" == "osx" ]]; then
        brew update;
        brew install cmake;
        brew upgrade cmake;
      fi
    - if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
          apt remove cmake;
          pip install --user cmake --upgrade;
      fi
    # - pip install --user cpp-coveralls

script:
    - mkdir build
    - cd build

    - if [[ "${COVERAGE}" == "1" ]]; then
          export CMAKE_OPTIONS="${CMAKE_OPTIONS} -D ENABLE_COVERAGE:BOOL=TRUE";
      fi

    - cmake $(python ./../script/cmake_release_flags.py) ${CMAKE_OPTIONS} ..
    - cmake --build . -- -j2

    - if [ "${BUILD_ONLY}" != "1" ]; then ctest; fi
    - if [ "${COVERAGE}" == "1" ]; then bash <(curl -s https://raw.githubusercontent.com/codecov/codecov-bash/master/codecov) -x $GCOV -a "-s `pwd`" ; fi

    - cd ..

after_script:
    # - if [ "${CPPCHECK}" == 1 ]; then ./script/runcppcheck.sh ; fi

notifications:
  email:
    recipients:
      - martin.michalec.fosl@gmail.com
    on_success: always
    on_failure: always
  # webhooks:
  #   urls:
  #     - https://webhooks.gitter.im/e/xxxxxxxxxxxxxxxxxxxx
  #   on_success: change  # options: [always|never|change] default: always
  #   on_failure: always  # options: [always|never|change] default: always
  #   on_start: false     # default: false
